# -*- Mode: sh; sh-indentation: 2; indent-tabs-mode: nil; sh-basic-offset: 2; -*-
# vim:ft=zsh:sw=2:sts=2:et

### Options ###

local OPT_HELP OPT_VERBOSE OPT_QUIET OPT_NOANSI
local -A opthash
zparseopts -E -D -A opthash h -help v -verbose q -quiet n -noansi || { print "Improper options given, see help (-h/--help)"; return 1; }

(( ${+opthash[-h]} + ${+opthash[--help]} ))     && OPT_HELP="-h"
(( ${+opthash[-v]} + ${+opthash[--verbose]} ))  && OPT_VERBOSE="-v"
(( ${+opthash[-q]} + ${+opthash[--quiet]} ))    && OPT_QUIET="-q"
(( ${+opthash[-n]} + ${+opthash[--noansi]} ))   && OPT_NOANSI="-n"

[[ -n "$OPT_NOANSI" ]] && { colors=(); fg=(); bg=(); fg_bold=(); bg_bold=(); reset_color=""; }

### Functions ###

usage() {
  print "$fg[green]Usage:$reset_color zsd [-h/--help] [-v/--verbose] [-q/--quiet] [-n/--noansi] $fg_bold[magenta]{file}$reset_color"
  print "The $fg_bold[magenta]file$reset_color will be processed and its documentation will be generated"
  print "in subdirectory \`zsdoc' (with meta-data in subdirectory \`data')."
  print "Supported are Bash and Zsh script files."
  print
  print "$fg[green]Options:$reset_color"
  print -- "$fg[magenta]-h/--help$reset_color      Usage information"
  print -- "$fg[magenta]-v/--verbose$reset_color   More verbose operation-status output"
  print -- "$fg[magenta]-q/--quiet$reset_color     No status messages"
  print -- "$fg[magenta]-n/--noansi$reset_color    No colors in output"
}

### Code ###

# Script with path to it, if it works
local ZERO="${(%):-%N}"

if [[ "$ZERO" != */* ]]; then
  if [[ -x /usr/local/bin/zsd ]]; then
    ZERO="/usr/local/bin/zsd"
  elif [[ -x /usr/bin/zsd ]]; then
    ZERO="/usr/bin/zsd"
  elif [[ -x /opt/bin/zsd ]]; then
    ZERO="/opt/bin/zsd"
  fi
fi

local TRANSFORM="${ZERO:h}/zsd-transform" DETECT="${ZERO:h}/zsd-detect"

if [[ -n "$OPT_HELP" ]]; then
  usage
  return 0
fi

if [[ "$#" -le 0 || "$*" = [[:space:]]## ]]; then
  print "Argument needed, see help (-h/--help)"
  return 1
fi

if [[ ! -f "$1" ]]; then
  echo "File \`$1' doesn't exist, see help (-h/--help)"
  return 1
fi

# Perform conversion to data structures - two pass
/usr/bin/env "$zsh_control_bin" "$TRANSFORM" $OPT_VERBOSE $OPT_QUIET $OPT_NOANSI "$1"
/usr/bin/env "$zsh_control_bin" "$DETECT" $OPT_VERBOSE $OPT_QUIET $OPT_NOANSI "$1"
