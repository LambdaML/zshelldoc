#!/usr/bin/env zsh
# This file is double-licensed under GPLv3 and MIT (see LICENSE file)

### Options ###

local OPT_HELP OPT_VERBOSE OPT_QUIET OPT_NOANSI
local -A opthash
zparseopts -E -D -A opthash h -help v -verbose q -quiet n -noansi || { echo "Improper options given, see help (-h/--help)"; return 1; }

(( ${+opthash[-h]} + ${+opthash[--help]} ))     && OPT_HELP="-h"
(( ${+opthash[-v]} + ${+opthash[--verbose]} ))  && OPT_VERBOSE="-v"
(( ${+opthash[-q]} + ${+opthash[--quiet]} ))    && OPT_QUIET="-q"
(( ${+opthash[-n]} + ${+opthash[--noansi]} ))   && OPT_NOANSI="-n"

[[ -n "$OPT_NOANSI" ]] && { colors=(); fg=(); bg=(); fg_bold=(); bg_bold=(); reset_color=""; }

[[ -z "$OPT_QUIET" ]] && print "$fg[cyan]zsd-to-adoc starting for file \`$fg_bold[yellow]$1$fg_no_bold[cyan]' (2nd pass)$reset_color"

if [[ -n "$OPT_HELP" ]]; then
    usage
    return 0
fi

if [[ "$#" -le 0 || "$*" = [[:space:]]## ]]; then
    print "zsd-to-adoc: Argument needed, see help (-h/--help)"
    return 1
fi

if [[ ! -f "$1" ]]; then
    [[ -z "$OPT_QUIET" || -n "$OPT_VERBOSE" ]] && print "$fg[magenta]zsd-to-adoc: File \`$1' doesn't exist, skipping it (see help, with -h/--help option)$reset_color"
    return 1
fi

if [[ ! -r "$1" ]]; then
    [[ -z "$OPT_QUIET" || -n "$OPT_VERBOSE" ]] && print "$fg[magenta]zsd-to-adoc: File \`$1' is unreadable, skipping it (see help, with -h/--help option)$reset_color"
    return 1
fi

### Code ###

line_count()
{
    local -a list
    list=( "${(@f)1}" )
    local count=${#list}
    [[ "$1" = *$'\n' ]] && (( -- count ))
    print -r -- "$count"
}

local name="$1" empty tmp body
local ofname="${name}.txt" fun
integer len
local -a arr

command rm -f -- "$ofname"

{
    # HEADER
    echo "$name(1)"
    len="${#name}+3"
    echo "${(r:len::=:)empty}"
    echo "Sebastian Gniazdowski <psprint@zdharma.org>"
    echo ":compat-mode!:"
    echo

    # NAME
    echo "NAME"
    echo "${(r:4::-:)empty}"
    echo "$name - a shell script"
    echo

    # SYNOPSIS
    echo "SYNOPSIS"
    echo "${(r:8::-:)empty}"
    echo "Documentation automatically generated with \`zshelldoc'"
    echo

    # FUNCTIONS
    echo "FUNCTIONS"
    echo "${(r:9::-:)empty}"
    echo

    local -a funs
    funs=( zsdoc/data/functions/"$name"/*(N) )
    funs=( "${funs[@]:t}" )

    for fun in "${funs[@]}"; do
        echo "$fun"
        len="${#fun}"
        echo "${(r:len::~:)empty}"
        echo
    done

    # DETAILS
    echo "DETAILS"
    echo "${(r:7::-:)empty}"
    echo

    for fun in "${funs[@]}"; do
        echo "$fun"
        len="${#fun}"
        echo "${(r:len::~:)empty}"
        [[ -f zsdoc/data/trees/"$name"/"$fun".tree ]] && {
            arr=( "${(@f)"$(<zsdoc/data/trees/"$name"/"$fun".tree)"}" )
            arr=( "${(@)arr[1,-3]}" )
            arr=( "${arr[@]/(#s)/ }" )
            echo "${(F)arr}"
        } || {
            echo "No functions called"
        }
        echo
    done
} >>| "zsdoc/$ofname"
