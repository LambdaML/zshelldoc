#!/usr/bin/env zsh
# This file is double-licensed under GPLv3 and MIT (see LICENSE file)

### Options ###

local OPT_HELP OPT_VERBOSE OPT_QUIET OPT_NOANSI
local -A opthash
zparseopts -E -D -A opthash h -help v -verbose q -quiet n -noansi || { echo "Improper options given, see help (-h/--help)"; return 1; }

(( ${+opthash[-h]} + ${+opthash[--help]} ))     && OPT_HELP="-h"
(( ${+opthash[-v]} + ${+opthash[--verbose]} ))  && OPT_VERBOSE="-v"
(( ${+opthash[-q]} + ${+opthash[--quiet]} ))    && OPT_QUIET="-q"
(( ${+opthash[-n]} + ${+opthash[--noansi]} ))   && OPT_NOANSI="-n"

[[ -n "$OPT_NOANSI" ]] && { colors=(); fg=(); bg=(); fg_bold=(); bg_bold=(); reset_color=""; }

[[ -z "$OPT_QUIET" ]] && print "$fg[cyan]zsd-to-adoc starting for file \`$fg_bold[yellow]$1$fg_no_bold[cyan]' (3rd pass)$reset_color"

if [[ -n "$OPT_HELP" ]]; then
    usage
    return 0
fi

if [[ "$#" -le 0 || "$*" = [[:space:]]## ]]; then
    print "zsd-to-adoc: Argument needed, see help (-h/--help)"
    return 1
fi

if [[ ! -f "$1" ]]; then
    [[ -z "$OPT_QUIET" || -n "$OPT_VERBOSE" ]] && print "$fg[magenta]zsd-to-adoc: File \`$1' doesn't exist, skipping it (see help, with -h/--help option)$reset_color"
    return 1
fi

if [[ ! -r "$1" ]]; then
    [[ -z "$OPT_QUIET" || -n "$OPT_VERBOSE" ]] && print "$fg[magenta]zsd-to-adoc: File \`$1' is unreadable, skipping it (see help, with -h/--help option)$reset_color"
    return 1
fi

### Code ###

line_count()
{
    local -a list
    list=( "${(@f)1}" )
    local count=${#list}
    [[ "$1" = *$'\n' ]] && (( -- count ))
    print -r -- "$count"
}

local name="$1" empty tmp body
local ofname="${name}.adoc" fun
integer len
local -a arr

command rm -f -- "zsdoc/$ofname"

{
    # HEADER
    print "$name(1)"
    len="${#name}+3"
    print "${(r:len::=:)empty}"
    print ":compat-mode!:"
    print

    # NAME
    print "NAME"
    print -- "${(r:4::-:)empty}"
    print -- "$name - a shell script"
    print

    # SYNOPSIS
    print "SYNOPSIS"
    print -- "${(r:8::-:)empty}"
    print "Documentation automatically generated with \`zshelldoc'"
    print

    # FUNCTIONS
    print "FUNCTIONS"
    print -- "${(r:9::-:)empty}"
    print

    local -a funs
    funs=( zsdoc/data/functions/"$name"/*(N) )
    funs=( "${funs[@]:t}" )

    for fun in "${funs[@]}"; do
        print -r -- " $fun"
        #len="${#fun}"
        #print -r -- "${(r:len::~:)empty}"
        #print
    done

    # DETAILS
    print
    print "DETAILS"
    print -- "${(r:7::-:)empty}"
    print

    [[ -f zsdoc/data/bodies/"$name" ]] && {
        print -r -- "Script Body"
        print -r -- "${(r:11::~:)empty}"
        print
        body=$(<zsdoc/data/bodies/"$name")
        print -r -- "`line_count $body` lines"
        print
        [[ -f zsdoc/data/trees/"$name"/Script_Body_.tree ]] && {
            print "Calls functions:"
            print
            arr=( "${(@f)"$(<zsdoc/data/trees/"$name"/Script_Body_.tree)"}" )
            [[ "${#arr}" -ge 3 ]] && arr=( "${(@)arr[1,-3]}" )
            arr=( "${arr[@]/(#s)/ }" )
            print -r -- "${(F)arr}"
        } || {
            print "No functions called (may attach to Zle or do hooks, etc.)"
        }
        print
    }

    for fun in "${funs[@]}"; do
        print -r -- "$fun"
        len="${#fun}"
        print -r -- "${(r:len::~:)empty}"
        print
        body=$(<zsdoc/data/functions/"$name"/"$fun")
        print -r -- "`line_count $body` lines"
        print 

        [[ -f zsdoc/data/trees/"$name"/"$fun".tree ]] && {
            print "Calls functions:"
            print 
            arr=( "${(@f)"$(<zsdoc/data/trees/"$name"/"$fun".tree)"}" )
            [[ "${#arr}" -ge 3 ]] && arr=( "${(@)arr[1,-3]}" )
            arr=( "${arr[@]/(#s)/ }" )
            print -r -- "${(F)arr}"
        } || {
            print "No functions called"
        }
        print

        arr=( zsdoc/data/trees/$name/*/$fun(N) )
        if [[ "${#arr}" -eq "0" ]]; then
            print "Not called by script or any function, may be a hook or Zle widget, etc."
            print
        else
            print "Called by:"
            print
            arr=( "${arr[@]#zsdoc/data/trees/$name/}" )
            arr=( "${arr[@]%/*}" )
            print -rl -- "${arr[@]/(#s)/ }"
            print
        fi

        [[ -f zsdoc/data/descriptions/"$name"/"$fun" ]] && {
            zsd-trim-indent "$(<zsdoc/data/descriptions/$name/$fun)"
            arr=( "${(@f)REPLY}" )
            arr=( "${arr[@]/(#s)/ }" )
            print "Comment:"
            print
            print -rl -- "${arr[@]}"
            print
        }

    done
} >>| "zsdoc/$ofname"
